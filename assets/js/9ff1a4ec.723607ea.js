"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9772],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,k=m["".concat(s,".").concat(u)]||m[u]||d[u]||l;return n?a.createElement(k,i(i({ref:t},c),{},{components:n})):a.createElement(k,i({ref:t},c))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7949:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const l={sidebar_position:20},i="Actions",o={unversionedId:"developer/service/moleculer/actions",id:"developer/service/moleculer/actions",title:"Actions",description:"The actions are the callable/public methods of the service. The action calling represents a remote-procedure-call (RPC). It has request parameters & returns response, like a HTTP request.",source:"@site/docs/developer/service/moleculer/actions.md",sourceDirName:"developer/service/moleculer",slug:"/developer/service/moleculer/actions",permalink:"/developer/service/moleculer/actions",draft:!1,editUrl:"https://github.com/steedos/steedos-docs/tree/master/docs/developer/service/moleculer/actions.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"developer",previous:{title:"Moleculer Microservices Framework",permalink:"/developer/service/moleculer/"},next:{title:"Events",permalink:"/developer/service/moleculer/events"}},s={},p=[{value:"Call services",id:"call-services",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Usages",id:"usages",level:3},{value:"Metadata",id:"metadata",level:3},{value:"Streaming",id:"streaming",level:2},{value:"Examples",id:"examples",level:3}],c={toc:p},m="wrapper";function d(e){let{components:t,...l}=e;return(0,r.kt)(m,(0,a.Z)({},c,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"actions"},"Actions"),(0,r.kt)("p",null,"The actions are the callable/public methods of the service. The action calling represents a remote-procedure-call (RPC). It has request parameters & returns response, like a HTTP request."),(0,r.kt)("p",null,"If you have multiple instances of services, the broker will load balance the request among instances."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"action-balancing",src:n(1946).Z,width:"639",height:"422"})),(0,r.kt)("h2",{id:"call-services"},"Call services"),(0,r.kt)("p",null,"To call a service use the ",(0,r.kt)("inlineCode",{parentName:"p"},"broker.call")," method. The broker looks for the service (and a node) which has the given action and call it. The function returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"."),(0,r.kt)("h3",{id:"syntax"},"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const res = await broker.call(actionName, params, opts);\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"actionName")," is a dot-separated string. The first part of it is the service name, while the second part of it represents the action name. So if you have a ",(0,r.kt)("inlineCode",{parentName:"p"},"posts")," service with a ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," action, you can call it as ",(0,r.kt)("inlineCode",{parentName:"p"},"posts.create"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"params")," is an object which is passed to the action as a part of the Context. The service can access it via ",(0,r.kt)("inlineCode",{parentName:"p"},"ctx.params"),". ",(0,r.kt)("em",{parentName:"p"},"It is optional. If you don't define, it will be ",(0,r.kt)("inlineCode",{parentName:"em"},"{}")),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"opts")," is an object to set/override some request parameters, e.g.: ",(0,r.kt)("inlineCode",{parentName:"p"},"timeout"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"retryCount"),". ",(0,r.kt)("em",{parentName:"p"},"It is optional.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Available calling options:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"timeout")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"Timeout of request in milliseconds. If the request is timed out and you don't define ",(0,r.kt)("inlineCode",{parentName:"td"},"fallbackResponse"),", broker will throw a ",(0,r.kt)("inlineCode",{parentName:"td"},"RequestTimeout")," error. To disable set ",(0,r.kt)("inlineCode",{parentName:"td"},"0"),". If it's not defined, the ",(0,r.kt)("inlineCode",{parentName:"td"},"requestTimeout")," value from broker options will be used.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"retries")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"Count of retry of request. If the request is timed out, broker will try to call again. To disable set ",(0,r.kt)("inlineCode",{parentName:"td"},"0"),". If it's not defined, the ",(0,r.kt)("inlineCode",{parentName:"td"},"retryPolicy.retries")," value from broker options will be used.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fallbackResponse")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Any")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns it, if the request has failed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"nodeID")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"Target nodeID. If set, it will make a direct call to the specified node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"meta")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Object")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{}")),(0,r.kt)("td",{parentName:"tr",align:null},"Metadata of request. Access it via ",(0,r.kt)("inlineCode",{parentName:"td"},"ctx.meta")," in actions handlers. It will be transferred & merged at nested calls, as well.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"parentCtx")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Context")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"Parent ",(0,r.kt)("inlineCode",{parentName:"td"},"Context")," instance. Use it to chain the calls.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"requestID")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"Request ID or Correlation ID. Use it for tracing.")))),(0,r.kt)("h3",{id:"usages"},"Usages"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Call without params")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const res = await broker.call("user.list");\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Call with params")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const res = await broker.call("user.get", { id: 3 });\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Call with calling options")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const res = await broker.call("user.recommendation", { limit: 5 }, {\n    timeout: 500,\n    retries: 3,\n    fallbackResponse: defaultRecommendation\n});\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Call with promise error handling")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'broker.call("posts.update", { id: 2, title: "Modified post title" })\n    .then(res => console.log("Post updated!"))\n    .catch(err => console.error("Unable to update Post!", err));    \n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},'Direct call: get health info from the "node-21" node')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const res = await broker.call("$node.health", null, { nodeID: "node-21" })\n')),(0,r.kt)("h3",{id:"metadata"},"Metadata"),(0,r.kt)("p",null,"Send meta information to services with ",(0,r.kt)("inlineCode",{parentName:"p"},"meta")," property. Access it via ",(0,r.kt)("inlineCode",{parentName:"p"},"ctx.meta")," in action handlers. Please note that in nested calls the ",(0,r.kt)("inlineCode",{parentName:"p"},"meta")," is merged."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"When writing REST APIs, you can obtain the current user session from ",(0,r.kt)("inlineCode",{parentName:"p"},"ctx.meta.user"),". If you want to access ",(0,r.kt)("inlineCode",{parentName:"p"},"ctx.meta.user")," within the action being called, you need to manually pass it in.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const res = await this.broker.call('objectql.find', \n  {\n    objectName: 'accounts',\n    query: {\n      fields: ['name', 'owner'],                      \n      filters: ['owner', '=', ctx.meta.user.userId],  \n      sort: 'name desc'                               \n    },\n  },\n  {\n    meta:{\n        user: ctx.meta.user\n    }\n  }\n);\n")),(0,r.kt)("h2",{id:"streaming"},"Streaming"),(0,r.kt)("p",null,"Moleculer supports Node.js streams as request ",(0,r.kt)("inlineCode",{parentName:"p"},"params")," and as response. Use it to transfer an incoming file from a gateway, encode/decode or compress/decompress streams."),(0,r.kt)("h3",{id:"examples"},"Examples"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Send a file to a service as a stream")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const stream = fs.createReadStream(fileName);\n\nbroker.call("storage.save", stream, { meta: { filename: "avatar-123.jpg" }});\n')),(0,r.kt)("p",null,"Please note, the ",(0,r.kt)("inlineCode",{parentName:"p"},"params")," should be a stream, you cannot add any additional variables to the ",(0,r.kt)("inlineCode",{parentName:"p"},"params"),". Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"meta")," property to transfer additional data."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Receiving a stream in a service")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'module.exports = {\n    name: "storage",\n    actions: {\n        save(ctx) {\n            // Save the received stream to a file\n            const s = fs.createWriteStream(`/tmp/${ctx.meta.filename}`);\n            ctx.params.pipe(s);\n        }\n    }\n};\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return a stream as response in a service")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'module.exports = {\n    name: "storage",\n    actions: {\n        get: {\n            params: {\n                filename: "string"\n            },\n            handler(ctx) {\n                return fs.createReadStream(`/tmp/${ctx.params.filename}`);\n            }\n        }\n    }\n};\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Process received stream on the caller side")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const filename = "avatar-123.jpg";\nbroker.call("storage.get", { filename })\n    .then(stream => {\n        const s = fs.createWriteStream(`./${filename}`);\n        stream.pipe(s);\n        s.on("close", () => broker.logger.info("File has been received"));\n    })\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"AES encode/decode example service")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const crypto = require("crypto");\nconst password = "moleculer";\n\nmodule.exports = {\n    name: "aes",\n    actions: {\n        encrypt(ctx) {\n            const encrypt = crypto.createCipher("aes-256-ctr", password);\n            return ctx.params.pipe(encrypt);\n        },\n\n        decrypt(ctx) {\n            const decrypt = crypto.createDecipher("aes-256-ctr", password);\n            return ctx.params.pipe(decrypt);\n        }\n    }\n};\n')))}d.isMDXComponent=!0},1946:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/action-balancing-2a12314575631352233e6a52d63b43cf.gif"}}]);