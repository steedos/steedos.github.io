"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5045],{98469:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>l});var a=s(74848),r=s(28453);const c={sidebar_position:20,title:"Package Service"},t="What is Package Service?",i={id:"developer/service/package-service",title:"Package Service",description:"The Steedos Platform is based on the Moleculer microservices architecture, where each package is a Moleculer Service. You can define actions, methods, and subscribe to events in the service.",source:"@site/docs/developer/service/package-service.md",sourceDirName:"developer/service",slug:"/developer/service/package-service",permalink:"/developer/service/package-service",draft:!1,unlisted:!1,editUrl:"https://github.com/steedos/steedos-docs/tree/master/docs/developer/service/package-service.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20,title:"Package Service"},sidebar:"developer",previous:{title:"Overview",permalink:"/developer/service/overview"},next:{title:"REST API",permalink:"/developer/service/action-api"}},o={},l=[{value:"package.service.js",id:"packageservicejs",level:2},{value:"namespace",id:"namespace",level:3},{value:"mixins",id:"mixins",level:3},{value:"dependencies",id:"dependencies",level:3},{value:"Actions",id:"actions",level:2},{value:"Call services",id:"call-services",level:2},{value:"Syntax",id:"syntax",level:3},{value:"REST API",id:"rest-api",level:2},{value:"Triggers",id:"triggers",level:2},{value:"Events",id:"events",level:2},{value:"Subscribe to events",id:"subscribe-to-events",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"what-is-package-service",children:"What is Package Service?"}),"\n",(0,a.jsxs)(n.p,{children:["The Steedos Platform is based on the Moleculer microservices architecture, where each package is a ",(0,a.jsx)(n.a,{href:"https://moleculer.services/docs/0.14/services",children:"Moleculer Service"}),". You can define actions, methods, and subscribe to events in the service."]}),"\n",(0,a.jsx)(n.h2,{id:"packageservicejs",children:"package.service.js"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"package.service.js"})," in the root directory of the steedos package is the loading entry for the package microservice."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const packageJSON = require('./package.json');\n\nmodule.exports = {\n  name: packageJSON.name,\n  namespace: \"steedos\",\n\n  /*\n    After mixin @steedos/service-package-loader, the package service will \n    automatically scan and load metadata files from subfolders upon startup. \n  */\n  mixins: [require('@steedos/service-package-loader')],\n\n  metadata: {\n    $package: {\n      name: packageJSON.name,\n      version: packageJSON.version,\n      path: __dirname,\n      isPackage: true\n    }\n  },\n\n  /**\n   * Settings\n   */\n  settings: {\n  },\n\n  /**\n   * Dependencies\n   */\n  dependencies: [],\n\n  /**\n   * Actions\n   */\n  actions: {\n\n  },\n\n  /**\n   * Events\n   */\n  events: {\n\n    },\n  /**\n   * Methods\n   */\n  methods: {\n  },\n\n  /**\n   * Service created lifecycle event handler\n   */\n  async created() {\n  },\n\n  /**\n     * Service started lifecycle event handler\n     */\n  async started() {\n  },\n\n  /**\n   * Service stopped lifecycle event handler\n   */\n  async stopped() {\n  }\n};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"namespace",children:"namespace"}),"\n",(0,a.jsxs)(n.p,{children:["Namespace of nodes to segment your nodes on the same network.\nMust be set to ",(0,a.jsx)(n.code,{children:"steedos"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"mixins",children:"mixins"}),"\n",(0,a.jsx)(n.p,{children:"Mixins are a flexible way to distribute reusable functionalities for Moleculer services. The Service constructor merges these mixins with the current schema. When a service uses mixins, all properties present in the mixin will be \u201cmixed\u201d into the current service."}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["After mixin ",(0,a.jsx)(n.code,{children:"@steedos/service-package-loader"}),", the package service will automatically scan and load metadata files from subfolders upon startup."]})}),"\n",(0,a.jsx)(n.h3,{id:"dependencies",children:"dependencies"}),"\n",(0,a.jsx)(n.p,{children:"If your service depends on other services, use the dependencies property in the schema. The service waits for dependent services before calls the started lifecycle event handler."}),"\n",(0,a.jsxs)(n.p,{children:["If the package you are developing depends on metadata from another package, you can use ",(0,a.jsx)(n.code,{children:"dependencies"})," to control the loading order of the packages. For example, if the contract management package relies on metadata from the master data package, you can define it as follows:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'module.exports = {\n  name: "@steedos-labs/contract",\n  dependencies: ["@steedos-labs/master"],\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"actions",children:"Actions"}),"\n",(0,a.jsxs)(n.p,{children:["The actions are the callable/public methods of the service. The action calling represents a remote-procedure-call (RPC). It has request parameters & returns response, like a HTTP request. For more information check the ",(0,a.jsx)(n.a,{href:"https://moleculer.services/docs/0.14/actions",children:"Moleculer Actions"})," documentation."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'  actions: {\n    multi: {\n      cache: false,\n      params: {\n        a: "number",\n        b: "number"\n      },\n      handler(ctx) {\n        if (!ctx.action.cache)\n          return Number(ctx.params.a) * Number(ctx.params.b);\n      }\n    }\n  }\n'})}),"\n",(0,a.jsx)(n.h2,{id:"call-services",children:"Call services"}),"\n",(0,a.jsxs)(n.p,{children:["To call a service use the ",(0,a.jsx)(n.code,{children:"broker.call"})," method. The broker looks for the service (and a node) which has the given action and call it. The function returns a ",(0,a.jsx)(n.code,{children:"Promise"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const res = await broker.call(actionName, params, opts);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"rest-api",children:"REST API"}),"\n",(0,a.jsxs)(n.p,{children:["Steedos comes with a built-in ",(0,a.jsx)(n.a,{href:"https://moleculer.services/docs/0.14/moleculer-web",children:"API Gateway"}),", it can publish your services as RESTful APIs."]}),"\n",(0,a.jsx)(n.p,{children:"This way, your action function can be accessed directly using an HTTP request, without the need to connect to the microservices network."}),"\n",(0,a.jsxs)(n.p,{children:["You can publish an action as a RESTful API by specifying the ",(0,a.jsx)(n.code,{children:"rest"})," parameter."]}),"\n",(0,a.jsxs)(n.p,{children:["For more information check the ",(0,a.jsx)(n.a,{href:"./action-api",children:"REST API"})," documentation."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"  actions: {\n    hello: {\n      rest: { method: 'GET', path: '/hello/:name' },\n      handler(ctx) {\n        return {\n          data: 'Welcome ' + ctx.params.name\n        }\n      }\n    },\n  }\n"})}),"\n",(0,a.jsx)(n.h2,{id:"triggers",children:"Triggers"}),"\n",(0,a.jsx)(n.p,{children:"By writing triggers, you can automatically trigger a piece of server-side code before and after record creation, deletion, and changes, achieving personalized data validation and processing."}),"\n",(0,a.jsxs)(n.p,{children:["You can define an action and add a ",(0,a.jsx)(n.code,{children:"trigger"})," parameter to it."]}),"\n",(0,a.jsxs)(n.p,{children:["For more information check the ",(0,a.jsx)(n.a,{href:"./action-trigger",children:"Trigger"})," documentation."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"  actions: {\n    spaceUsersBeforeUpdate: {\n      trigger: { \n        listenTo: 'space_users', \n        when: ['beforeInsert', 'beforeUpdate']\n      },\n      async handler(ctx) {\n        this.broker.logger.debug('spaceUsersBeforeUpdate', ctx)\n      }   \n    }\n  }\n"})}),"\n",(0,a.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,a.jsxs)(n.p,{children:["You can subscribe to events under the events key. For more information check the ",(0,a.jsx)(n.a,{href:"./moleculer/events",children:"Events"})," documentation."]}),"\n",(0,a.jsx)(n.h3,{id:"subscribe-to-events",children:"Subscribe to events"}),"\n",(0,a.jsx)(n.p,{children:"Context-based event handler & emit a nested event."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'module.exports = {\n    name: "@steedos-labs/project",\n    events: {\n        "@space_users.inserted"(ctx) {\n            console.log("Payload:", ctx.params);\n            console.log("Sender:", ctx.nodeID);\n            console.log("Metadata:", ctx.meta);\n            console.log("The called event name:", ctx.eventName);\n\n            ctx.emit("users.changed", { data: ctx.params.doc });\n        },\n\n        "@space_users.deleted": {\n            handler(ctx) {\n                console.log(`${this.broker.nodeID}:${this.fullName}: Event \'${ctx.eventName}\' received. Payload:`, ctx.params, ctx.meta);\n            }\n        }\n    }\n};\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>i});var a=s(96540);const r={},c=a.createContext(r);function t(e){const n=a.useContext(c);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),a.createElement(c.Provider,{value:n},e.children)}}}]);