"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9387],{43834:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>t,metadata:()=>c,toc:()=>a});var n=i(74848),r=i(28453);const t={},o="Moleculer Microservices Framework",c={id:"developer/service/moleculer/README",title:"Moleculer Microservices Framework",description:"Moleculer is a fast, powerful, and flexible microservices framework. Its core philosophy revolves around building applications by decomposing them into services. Each service is autonomous, allowing for independent deployment, scaling, and maintenance. Moleculer provides a lightweight messaging system, simplifying and optimizing communication between services.",source:"@site/docs/developer/service/moleculer/README.md",sourceDirName:"developer/service/moleculer",slug:"/developer/service/moleculer/",permalink:"/developer/service/moleculer/",draft:!1,unlisted:!1,editUrl:"https://github.com/steedos/steedos-docs/tree/master/docs/developer/service/moleculer/README.md",tags:[],version:"current",frontMatter:{},sidebar:"developer",previous:{title:"Internationalization",permalink:"/developer/service/locale"},next:{title:"Actions",permalink:"/developer/service/moleculer/actions"}},l={},a=[{value:"Basic Architecture",id:"basic-architecture",level:3},{value:"Service Lifecycle",id:"service-lifecycle",level:3},{value:"Nodes and Service Discovery",id:"nodes-and-service-discovery",level:3}];function d(e){const s={h1:"h1",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"moleculer-microservices-framework",children:"Moleculer Microservices Framework"}),"\n",(0,n.jsx)(s.p,{children:"Moleculer is a fast, powerful, and flexible microservices framework. Its core philosophy revolves around building applications by decomposing them into services. Each service is autonomous, allowing for independent deployment, scaling, and maintenance. Moleculer provides a lightweight messaging system, simplifying and optimizing communication between services."}),"\n",(0,n.jsx)(s.h3,{id:"basic-architecture",children:"Basic Architecture"}),"\n",(0,n.jsx)(s.p,{children:"The foundational architecture of Moleculer consists of several main components:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Services"}),": This represents the cornerstone of the Moleculer architecture. Each service signifies an independent functional unit, deployable, scalable, and updatable in isolation."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Transporters"}),": Responsible for conveying messages between various services or nodes. Moleculer supports numerous transport protocols such as NATS, MQTT, and AMQP, making it easily integrable into diverse environments."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Nodes"}),": A node represents a computational instance running one or more services. Nodes communicate with each other through transporters."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Service Brokers"}),": Service brokers offer a unified interface for each service, facilitating easy communication and interoperability."]}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"service-lifecycle",children:"Service Lifecycle"}),"\n",(0,n.jsx)(s.p,{children:"Within Moleculer, each service experiences its lifecycle, encompassing the following primary stages:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Creation"}),": When a service initially starts up, it enters the creation phase. During this stage, the service initializes and prepares to process requests."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Start"}),": Once the service is primed to accept requests, it transitions into the start phase. In this phase, the service can begin handling requests and responses."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Running"}),": During the running phase, the service persistently processes requests until it's halted or restarted."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Stopping"}),": When the service is no longer required to operate, it enters the stopping phase. Here, the service releases all resources and ceases to process new requests."]}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"nodes-and-service-discovery",children:"Nodes and Service Discovery"}),"\n",(0,n.jsx)(s.p,{children:"Moleculer employs dynamic service discovery to automatically detect and connect to other nodes and services on the network. Here are its key features:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Dynamic Discovery"}),": As new nodes or services join the network, Moleculer automatically identifies and establishes connections with them."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Health Checks"}),": Moleculer routinely inspects all nodes and services to ascertain their activeness and proper functioning."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Load Balancing"}),": Moleculer adopts an in-built load balancing strategy to ensure requests are evenly distributed across all available service instances."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Failover"}),": Should a service instance fail, Moleculer automatically redirects requests to other functioning instances, guaranteeing high availability."]}),"\n"]})]})}function u(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,s,i)=>{i.d(s,{R:()=>o,x:()=>c});var n=i(96540);const r={},t=n.createContext(r);function o(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(t.Provider,{value:s},e.children)}}}]);