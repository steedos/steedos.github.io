"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2389],{3905:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>v});var n=t(7294);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=n.createContext({}),c=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},u=function(e){var r=c(e.components);return n.createElement(l.Provider,{value:r},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=c(t),d=i,v=p["".concat(l,".").concat(d)]||p[d]||m[d]||o;return t?n.createElement(v,s(s({ref:r},u),{},{components:t})):n.createElement(v,s({ref:r},u))}));function v(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var o=t.length,s=new Array(o);s[0]=d;var a={};for(var l in r)hasOwnProperty.call(r,l)&&(a[l]=r[l]);a.originalType=e,a[p]="string"==typeof e?e:i,s[1]=a;for(var c=2;c<o;c++)s[c]=t[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7303:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var n=t(7462),i=(t(7294),t(3905));const o={},s="Moleculer Microservices Framework",a={unversionedId:"developer/service/moleculer/README",id:"developer/service/moleculer/README",title:"Moleculer Microservices Framework",description:"Moleculer is a fast, powerful, and flexible microservices framework. Its core philosophy revolves around building applications by decomposing them into services. Each service is autonomous, allowing for independent deployment, scaling, and maintenance. Moleculer provides a lightweight messaging system, simplifying and optimizing communication between services.",source:"@site/docs/developer/service/moleculer/README.md",sourceDirName:"developer/service/moleculer",slug:"/developer/service/moleculer/",permalink:"/developer/service/moleculer/",draft:!1,editUrl:"https://github.com/steedos/steedos-docs/tree/master/docs/developer/service/moleculer/README.md",tags:[],version:"current",frontMatter:{},sidebar:"developer",previous:{title:"Internationalization",permalink:"/developer/service/locale"},next:{title:"Actions",permalink:"/developer/service/moleculer/actions"}},l={},c=[{value:"Basic Architecture",id:"basic-architecture",level:3},{value:"Service Lifecycle",id:"service-lifecycle",level:3},{value:"Nodes and Service Discovery",id:"nodes-and-service-discovery",level:3}],u={toc:c},p="wrapper";function m(e){let{components:r,...t}=e;return(0,i.kt)(p,(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"moleculer-microservices-framework"},"Moleculer Microservices Framework"),(0,i.kt)("p",null,"Moleculer is a fast, powerful, and flexible microservices framework. Its core philosophy revolves around building applications by decomposing them into services. Each service is autonomous, allowing for independent deployment, scaling, and maintenance. Moleculer provides a lightweight messaging system, simplifying and optimizing communication between services."),(0,i.kt)("h3",{id:"basic-architecture"},"Basic Architecture"),(0,i.kt)("p",null,"The foundational architecture of Moleculer consists of several main components:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Services"),": This represents the cornerstone of the Moleculer architecture. Each service signifies an independent functional unit, deployable, scalable, and updatable in isolation."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Transporters"),": Responsible for conveying messages between various services or nodes. Moleculer supports numerous transport protocols such as NATS, MQTT, and AMQP, making it easily integrable into diverse environments."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Nodes"),": A node represents a computational instance running one or more services. Nodes communicate with each other through transporters."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Service Brokers"),": Service brokers offer a unified interface for each service, facilitating easy communication and interoperability.")),(0,i.kt)("h3",{id:"service-lifecycle"},"Service Lifecycle"),(0,i.kt)("p",null,"Within Moleculer, each service experiences its lifecycle, encompassing the following primary stages:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Creation"),": When a service initially starts up, it enters the creation phase. During this stage, the service initializes and prepares to process requests."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Start"),": Once the service is primed to accept requests, it transitions into the start phase. In this phase, the service can begin handling requests and responses."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Running"),": During the running phase, the service persistently processes requests until it's halted or restarted."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Stopping"),": When the service is no longer required to operate, it enters the stopping phase. Here, the service releases all resources and ceases to process new requests.")),(0,i.kt)("h3",{id:"nodes-and-service-discovery"},"Nodes and Service Discovery"),(0,i.kt)("p",null,"Moleculer employs dynamic service discovery to automatically detect and connect to other nodes and services on the network. Here are its key features:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Dynamic Discovery"),": As new nodes or services join the network, Moleculer automatically identifies and establishes connections with them."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Health Checks"),": Moleculer routinely inspects all nodes and services to ascertain their activeness and proper functioning."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Load Balancing"),": Moleculer adopts an in-built load balancing strategy to ensure requests are evenly distributed across all available service instances."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Failover"),": Should a service instance fail, Moleculer automatically redirects requests to other functioning instances, guaranteeing high availability.")))}m.isMDXComponent=!0}}]);