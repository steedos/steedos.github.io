"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8253],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>v});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=d(n),u=r,v=c["".concat(s,".").concat(u)]||c[u]||m[u]||l;return n?a.createElement(v,i(i({ref:t},p),{},{components:n})):a.createElement(v,i({ref:t},p))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var d=2;d<l;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2223:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const l={},i="Events",o={unversionedId:"developer/service/moleculer/events",id:"developer/service/moleculer/events",title:"Events",description:"Steedos has a built-in event bus to support Event-driven architecture and to send events to local and remote services.",source:"@site/docs/developer/service/moleculer/events.md",sourceDirName:"developer/service/moleculer",slug:"/developer/service/moleculer/events",permalink:"/developer/service/moleculer/events",draft:!1,editUrl:"https://github.com/steedos/steedos-docs/tree/master/docs/developer/service/moleculer/events.md",tags:[],version:"current",frontMatter:{},sidebar:"developer",previous:{title:"Actions",permalink:"/developer/service/moleculer/actions"},next:{title:"REPL Console",permalink:"/developer/service/moleculer/repl"}},s={},d=[{value:"Balanced events",id:"balanced-events",level:2},{value:"Emit balanced events",id:"emit-balanced-events",level:3},{value:"Broadcast event",id:"broadcast-event",level:2},{value:"Subscribe to events",id:"subscribe-to-events",level:2},{value:"Event parameter validation",id:"event-parameter-validation",level:3},{value:"Steedos events",id:"steedos-events",level:2},{value:"Record CRUD events",id:"record-crud-events",level:3},{value:"System events",id:"system-events",level:2},{value:"<code>$services.changed</code>",id:"serviceschanged",level:3}],p={toc:d},c="wrapper";function m(e){let{components:t,...l}=e;return(0,r.kt)(c,(0,a.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"events"},"Events"),(0,r.kt)("p",null,"Steedos has a built-in event bus to support ",(0,r.kt)("a",{parentName:"p",href:"http://microservices.io/patterns/data/event-driven-architecture.html"},"Event-driven architecture")," and to send events to local and remote services. "),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Please note that built-in events are fire-and-forget meaning that if the service is offline, the event will be lost.")),(0,r.kt)("h2",{id:"balanced-events"},"Balanced events"),(0,r.kt)("p",null,"The event listeners are arranged to logical groups. It means that only one listener is triggered in every group."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Example:")," you have 2 main services: ",(0,r.kt)("inlineCode",{parentName:"p"},"billing")," & ",(0,r.kt)("inlineCode",{parentName:"p"},"payment"),". Both subscribe to the ",(0,r.kt)("inlineCode",{parentName:"p"},"user.purchased")," event. You start 2 instances of ",(0,r.kt)("inlineCode",{parentName:"p"},"billing")," service and 2 instances of ",(0,r.kt)("inlineCode",{parentName:"p"},"payment")," service. When you emit the ",(0,r.kt)("inlineCode",{parentName:"p"},"user.purchased")," event, only one ",(0,r.kt)("inlineCode",{parentName:"p"},"billing")," and one ",(0,r.kt)("inlineCode",{parentName:"p"},"payment")," service instance will receive the event.")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"balanced-events",src:n(5236).Z,width:"641",height:"629"})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'module.exports = {\n    name: "@steedos-labs/project",\n    events: {\n        "user.purchased": {\n            handler(ctx) {\n                console.log("Payload:", ctx.params);\n                console.log("Sender:", ctx.nodeID);\n                console.log("Metadata:", ctx.meta);\n                console.log("The called event name:", ctx.eventName);\n            }\n        }\n    }\n}\n')),(0,r.kt)("h3",{id:"emit-balanced-events"},"Emit balanced events"),(0,r.kt)("p",null,"Send balanced events with ",(0,r.kt)("inlineCode",{parentName:"p"},"broker.emit")," function. The first parameter is the name of the event, the second parameter is the payload.\n",(0,r.kt)("em",{parentName:"p"},"To send multiple values, wrap them into an ",(0,r.kt)("inlineCode",{parentName:"em"},"Object"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// The `user` will be serialized to transportation.\nbroker.emit("user.purchased", config);\n')),(0,r.kt)("h2",{id:"broadcast-event"},"Broadcast event"),(0,r.kt)("p",null,"The broadcast event is sent to all available local & remote services. It is not balanced, all service instances will receive it."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"broadcast-events",src:n(9990).Z,width:"642",height:"630"})),(0,r.kt)("p",null,"Send broadcast events with ",(0,r.kt)("inlineCode",{parentName:"p"},"broker.broadcast")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'broker.broadcast("user.updated", config);\n')),(0,r.kt)("h2",{id:"subscribe-to-events"},"Subscribe to events"),(0,r.kt)("p",null,"Event context is useful if you are using event-driven architecture and want to trace your events. The Event Context is very similar to Action Context, except for a few new event related properties. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'module.exports = {\n    name: "@steedos-labs/project",\n    events: {\n        "@space_users.inserted"(ctx) {\n            console.log("Payload:", ctx.params);\n            console.log("Sender:", ctx.nodeID);\n            console.log("Metadata:", ctx.meta);\n            console.log("The called event name:", ctx.eventName);\n\n            ctx.emit("users.changed", { data: ctx.params.doc });\n        },\n\n        "@space_users.deleted": {\n            handler(ctx) {\n                console.log(`${this.broker.nodeID}:${this.fullName}: Event \'${ctx.eventName}\' received. Payload:`, ctx.params, ctx.meta);\n            }\n        }\n    }\n};\n')),(0,r.kt)("p",null,"Subscribe to events in 'events' property of services. Use of wildcards (",(0,r.kt)("inlineCode",{parentName:"p"},"?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"**"),") is available in event names."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'module.exports = {\n    events: {\n        // Subscribe to `user.created` event\n        "@space_users.inserted"(ctx) {\n            console.log("User created:", ctx.params);\n        },\n\n        // Subscribe to all `user` events, e.g. "user.created", or "user.removed"\n        "@space_users.*"(ctx) {\n            console.log("User event:", ctx.params);\n        }\n        // Subscribe to every events\n        // Legacy event handler signature with context\n        "**"(payload, sender, event, ctx) {\n            console.log(`Event \'${event}\' received from ${sender} node:`, payload);\n        }\n    }\n}\n')),(0,r.kt)("h3",{id:"event-parameter-validation"},"Event parameter validation"),(0,r.kt)("p",null,"Similar to action parameter validation, the event parameter validation is supported.\nLike in action definition, you should define ",(0,r.kt)("inlineCode",{parentName:"p"},"params")," in event definition and the built-in ",(0,r.kt)("inlineCode",{parentName:"p"},"Validator")," validates the parameters in events."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// mailer.service.js\nmodule.exports = {\n    name: "@steedos-labs/mail",\n    events: {\n        "send.mail": {\n            // Validation schema\n            params: {\n                from: "string|optional",\n                to: "email",\n                subject: "string"\n            },\n            handler(ctx) {\n                this.logger.info("Event received, parameters OK!", ctx.params);\n            }\n        }\n    }\n};\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The validation errors are not sent back to the caller, they are logged or you can catch them with global error handler.")),(0,r.kt)("h2",{id:"steedos-events"},"Steedos events"),(0,r.kt)("h3",{id:"record-crud-events"},"Record CRUD events"),(0,r.kt)("p",null,"When records in a business object changes, Steedos automatically emits an event. You can subscribe to these events in your code to handle relevant business logic."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"@objectApiName.inserted"))),(0,r.kt)("p",null,"When data inserted in object."),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"@objectApiName.updated"))),(0,r.kt)("p",null,"When data updated in object."),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"@objectApiName.deleted"))),(0,r.kt)("p",null,"When data deleted in object."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Don't forget to add an ",(0,r.kt)("inlineCode",{parentName:"p"},"@")," symbol before the Object Api Name. For example, when the object api name is ",(0,r.kt)("inlineCode",{parentName:"p"},"space_users"),", you should write ",(0,r.kt)("inlineCode",{parentName:"p"},"@space_users."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Payload")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Variable"),(0,r.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isInsert"),(0,r.kt)("td",{parentName:"tr",align:null},"Returns true if this trigger is triggered by an insert operation.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isUpdate"),(0,r.kt)("td",{parentName:"tr",align:null},"Returns true if this trigger is triggered by an update operation.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isDelete"),(0,r.kt)("td",{parentName:"tr",align:null},"Returns true if this trigger is triggered by a delete operation.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isFind"),(0,r.kt)("td",{parentName:"tr",align:null},"Returns true if this trigger is triggered by a query operation.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isBefore"),(0,r.kt)("td",{parentName:"tr",align:null},"Returns true if this trigger is triggered before any record operation.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isAfter"),(0,r.kt)("td",{parentName:"tr",align:null},"Returns true if this trigger is triggered after all record operations.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"id"),(0,r.kt)("td",{parentName:"tr",align:null},"The unique identifier of the record ","[string]",".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"doc"),(0,r.kt)("td",{parentName:"tr",align:null},"The record content that needs to be inserted/updated ","[json]",".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"previousDoc"),(0,r.kt)("td",{parentName:"tr",align:null},"The record before updated/deleted ","[json]",".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"userId"),(0,r.kt)("td",{parentName:"tr",align:null},"The unique identifier of the current user ","[string]",".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spaceId"),(0,r.kt)("td",{parentName:"tr",align:null},"The current workspace ","[string]",".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"objectName"),(0,r.kt)("td",{parentName:"tr",align:null},"The current object name ","[string]",".")))),(0,r.kt)("h2",{id:"system-events"},"System events"),(0,r.kt)("p",null,"The broker broadcasts some internal events. These events always starts with ",(0,r.kt)("inlineCode",{parentName:"p"},"$")," prefix."),(0,r.kt)("h3",{id:"serviceschanged"},(0,r.kt)("inlineCode",{parentName:"h3"},"$services.changed")),(0,r.kt)("p",null,"The broker sends this event if the local node or a remote node loads or destroys services."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Payload")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"localService ")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"True if a local service changed.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Payload")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"node")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Node")),(0,r.kt)("td",{parentName:"tr",align:null},"Node info object")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"unexpected")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Boolean")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")," - Not received heartbeat, ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," - Received ",(0,r.kt)("inlineCode",{parentName:"td"},"DISCONNECT")," message from node.")))))}m.isMDXComponent=!0},5236:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/balanced-events-4cea11b100a1258a7d1026389b9b2b4e.gif"},9990:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/broadcast-events-b30b3ce5c3a2baae976dfdf542c598fa.gif"}}]);