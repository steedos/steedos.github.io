"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7502],{57265:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>d,metadata:()=>c,toc:()=>o});var t=s(74848),r=s(28453);const d={},i="Events",c={id:"developer/service/moleculer/events",title:"Events",description:"Steedos has a built-in event bus to support Event-driven architecture and to send events to local and remote services.",source:"@site/docs/developer/service/moleculer/events.md",sourceDirName:"developer/service/moleculer",slug:"/developer/service/moleculer/events",permalink:"/developer/service/moleculer/events",draft:!1,unlisted:!1,editUrl:"https://github.com/steedos/steedos-docs/tree/master/docs/developer/service/moleculer/events.md",tags:[],version:"current",frontMatter:{},sidebar:"developer",previous:{title:"Actions",permalink:"/developer/service/moleculer/actions"},next:{title:"REPL Console",permalink:"/developer/service/moleculer/repl"}},l={},o=[{value:"Balanced events",id:"balanced-events",level:2},{value:"Emit balanced events",id:"emit-balanced-events",level:3},{value:"Broadcast event",id:"broadcast-event",level:2},{value:"Subscribe to events",id:"subscribe-to-events",level:2},{value:"Event parameter validation",id:"event-parameter-validation",level:3},{value:"Steedos events",id:"steedos-events",level:2},{value:"Record CRUD events",id:"record-crud-events",level:3},{value:"System events",id:"system-events",level:2},{value:"<code>$services.changed</code>",id:"serviceschanged",level:3}];function a(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"events",children:"Events"}),"\n",(0,t.jsxs)(n.p,{children:["Steedos has a built-in event bus to support ",(0,t.jsx)(n.a,{href:"http://microservices.io/patterns/data/event-driven-architecture.html",children:"Event-driven architecture"})," and to send events to local and remote services."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"Please note that built-in events are fire-and-forget meaning that if the service is offline, the event will be lost."})}),"\n",(0,t.jsx)(n.h2,{id:"balanced-events",children:"Balanced events"}),"\n",(0,t.jsx)(n.p,{children:"The event listeners are arranged to logical groups. It means that only one listener is triggered in every group."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example:"})," you have 2 main services: ",(0,t.jsx)(n.code,{children:"billing"})," & ",(0,t.jsx)(n.code,{children:"payment"}),". Both subscribe to the ",(0,t.jsx)(n.code,{children:"user.purchased"})," event. You start 2 instances of ",(0,t.jsx)(n.code,{children:"billing"})," service and 2 instances of ",(0,t.jsx)(n.code,{children:"payment"})," service. When you emit the ",(0,t.jsx)(n.code,{children:"user.purchased"})," event, only one ",(0,t.jsx)(n.code,{children:"billing"})," and one ",(0,t.jsx)(n.code,{children:"payment"})," service instance will receive the event."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"balanced-events",src:s(24244).A+"",width:"641",height:"629"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'module.exports = {\n    name: "@steedos-labs/project",\n    events: {\n        "user.purchased": {\n            handler(ctx) {\n                console.log("Payload:", ctx.params);\n                console.log("Sender:", ctx.nodeID);\n                console.log("Metadata:", ctx.meta);\n                console.log("The called event name:", ctx.eventName);\n            }\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"emit-balanced-events",children:"Emit balanced events"}),"\n",(0,t.jsxs)(n.p,{children:["Send balanced events with ",(0,t.jsx)(n.code,{children:"broker.emit"})," function. The first parameter is the name of the event, the second parameter is the payload.\n",(0,t.jsxs)(n.em,{children:["To send multiple values, wrap them into an ",(0,t.jsx)(n.code,{children:"Object"}),"."]})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'// The `user` will be serialized to transportation.\nbroker.emit("user.purchased", config);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"broadcast-event",children:"Broadcast event"}),"\n",(0,t.jsx)(n.p,{children:"The broadcast event is sent to all available local & remote services. It is not balanced, all service instances will receive it."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"broadcast-events",src:s(49427).A+"",width:"642",height:"630"})}),"\n",(0,t.jsxs)(n.p,{children:["Send broadcast events with ",(0,t.jsx)(n.code,{children:"broker.broadcast"})," method."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'broker.broadcast("user.updated", config);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"subscribe-to-events",children:"Subscribe to events"}),"\n",(0,t.jsx)(n.p,{children:"Event context is useful if you are using event-driven architecture and want to trace your events. The Event Context is very similar to Action Context, except for a few new event related properties."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'module.exports = {\n    name: "@steedos-labs/project",\n    events: {\n        "@space_users.inserted"(ctx) {\n            console.log("Payload:", ctx.params);\n            console.log("Sender:", ctx.nodeID);\n            console.log("Metadata:", ctx.meta);\n            console.log("The called event name:", ctx.eventName);\n\n            ctx.emit("users.changed", { data: ctx.params.doc });\n        },\n\n        "@space_users.deleted": {\n            handler(ctx) {\n                console.log(`${this.broker.nodeID}:${this.fullName}: Event \'${ctx.eventName}\' received. Payload:`, ctx.params, ctx.meta);\n            }\n        }\n    }\n};\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Subscribe to events in 'events' property of services. Use of wildcards (",(0,t.jsx)(n.code,{children:"?"}),", ",(0,t.jsx)(n.code,{children:"*"}),", ",(0,t.jsx)(n.code,{children:"**"}),") is available in event names."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'module.exports = {\n    events: {\n        // Subscribe to `user.created` event\n        "@space_users.inserted"(ctx) {\n            console.log("User created:", ctx.params);\n        },\n\n        // Subscribe to all `user` events, e.g. "user.created", or "user.removed"\n        "@space_users.*"(ctx) {\n            console.log("User event:", ctx.params);\n        }\n        // Subscribe to every events\n        // Legacy event handler signature with context\n        "**"(payload, sender, event, ctx) {\n            console.log(`Event \'${event}\' received from ${sender} node:`, payload);\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"event-parameter-validation",children:"Event parameter validation"}),"\n",(0,t.jsxs)(n.p,{children:["Similar to action parameter validation, the event parameter validation is supported.\nLike in action definition, you should define ",(0,t.jsx)(n.code,{children:"params"})," in event definition and the built-in ",(0,t.jsx)(n.code,{children:"Validator"})," validates the parameters in events."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'// mailer.service.js\nmodule.exports = {\n    name: "@steedos-labs/mail",\n    events: {\n        "send.mail": {\n            // Validation schema\n            params: {\n                from: "string|optional",\n                to: "email",\n                subject: "string"\n            },\n            handler(ctx) {\n                this.logger.info("Event received, parameters OK!", ctx.params);\n            }\n        }\n    }\n};\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"The validation errors are not sent back to the caller, they are logged or you can catch them with global error handler."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"steedos-events",children:"Steedos events"}),"\n",(0,t.jsx)(n.h3,{id:"record-crud-events",children:"Record CRUD events"}),"\n",(0,t.jsx)(n.p,{children:"When records in a business object changes, Steedos automatically emits an event. You can subscribe to these events in your code to handle relevant business logic."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"@objectApiName.inserted"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"When data inserted in object."}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"@objectApiName.updated"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"When data updated in object."}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"@objectApiName.deleted"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"When data deleted in object."}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Don't forget to add an ",(0,t.jsx)(n.code,{children:"@"})," symbol before the Object Api Name. For example, when the object api name is ",(0,t.jsx)(n.code,{children:"space_users"}),", you should write ",(0,t.jsx)(n.code,{children:"@space_users."})]})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Payload"})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Variable"}),(0,t.jsx)(n.th,{children:"Usage"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"isInsert"}),(0,t.jsx)(n.td,{children:"Returns true if this trigger is triggered by an insert operation."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"isUpdate"}),(0,t.jsx)(n.td,{children:"Returns true if this trigger is triggered by an update operation."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"isDelete"}),(0,t.jsx)(n.td,{children:"Returns true if this trigger is triggered by a delete operation."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"isFind"}),(0,t.jsx)(n.td,{children:"Returns true if this trigger is triggered by a query operation."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"isBefore"}),(0,t.jsx)(n.td,{children:"Returns true if this trigger is triggered before any record operation."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"isAfter"}),(0,t.jsx)(n.td,{children:"Returns true if this trigger is triggered after all record operations."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"id"}),(0,t.jsx)(n.td,{children:"The unique identifier of the record [string]."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"doc"}),(0,t.jsx)(n.td,{children:"The record content that needs to be inserted/updated [json]."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"previousDoc"}),(0,t.jsx)(n.td,{children:"The record before updated/deleted [json]."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"userId"}),(0,t.jsx)(n.td,{children:"The unique identifier of the current user [string]."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"spaceId"}),(0,t.jsx)(n.td,{children:"The current workspace [string]."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"objectName"}),(0,t.jsx)(n.td,{children:"The current object name [string]."})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"system-events",children:"System events"}),"\n",(0,t.jsxs)(n.p,{children:["The broker broadcasts some internal events. These events always starts with ",(0,t.jsx)(n.code,{children:"$"})," prefix."]}),"\n",(0,t.jsx)(n.h3,{id:"serviceschanged",children:(0,t.jsx)(n.code,{children:"$services.changed"})}),"\n",(0,t.jsx)(n.p,{children:"The broker sends this event if the local node or a remote node loads or destroys services."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Payload"})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Name"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"localService "})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Boolean"})}),(0,t.jsx)(n.td,{children:"True if a local service changed."})]})})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Payload"})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Name"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"node"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Node"})}),(0,t.jsx)(n.td,{children:"Node info object"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"unexpected"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Boolean"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"true"})," - Not received heartbeat, ",(0,t.jsx)(n.code,{children:"false"})," - Received ",(0,t.jsx)(n.code,{children:"DISCONNECT"})," message from node."]})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},24244:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/balanced-events-4cea11b100a1258a7d1026389b9b2b4e.gif"},49427:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/broadcast-events-b30b3ce5c3a2baae976dfdf542c598fa.gif"},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var t=s(96540);const r={},d=t.createContext(r);function i(e){const n=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(d.Provider,{value:n},e.children)}}}]);