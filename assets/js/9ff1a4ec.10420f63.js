"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6506],{79801:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>a,toc:()=>d});var r=n(74848),t=n(28453);const c={sidebar_position:20},i="Actions",a={id:"developer/service/moleculer/actions",title:"Actions",description:"The actions are the callable/public methods of the service. The action calling represents a remote-procedure-call (RPC). It has request parameters & returns response, like a HTTP request.",source:"@site/docs/developer/service/moleculer/actions.md",sourceDirName:"developer/service/moleculer",slug:"/developer/service/moleculer/actions",permalink:"/developer/service/moleculer/actions",draft:!1,unlisted:!1,editUrl:"https://github.com/steedos/steedos-docs/tree/master/docs/developer/service/moleculer/actions.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"developer",previous:{title:"Moleculer Microservices Framework",permalink:"/developer/service/moleculer/"},next:{title:"Events",permalink:"/developer/service/moleculer/events"}},l={},d=[{value:"Call services",id:"call-services",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Usages",id:"usages",level:3},{value:"Metadata",id:"metadata",level:3},{value:"Streaming",id:"streaming",level:2},{value:"Examples",id:"examples",level:3}];function o(e){const s={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h1,{id:"actions",children:"Actions"}),"\n",(0,r.jsx)(s.p,{children:"The actions are the callable/public methods of the service. The action calling represents a remote-procedure-call (RPC). It has request parameters & returns response, like a HTTP request."}),"\n",(0,r.jsx)(s.p,{children:"If you have multiple instances of services, the broker will load balance the request among instances."}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{alt:"action-balancing",src:n(47426).A+"",width:"639",height:"422"})}),"\n",(0,r.jsx)(s.h2,{id:"call-services",children:"Call services"}),"\n",(0,r.jsxs)(s.p,{children:["To call a service use the ",(0,r.jsx)(s.code,{children:"broker.call"})," method. The broker looks for the service (and a node) which has the given action and call it. The function returns a ",(0,r.jsx)(s.code,{children:"Promise"}),"."]}),"\n",(0,r.jsx)(s.h3,{id:"syntax",children:"Syntax"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:"const res = await broker.call(actionName, params, opts);\n"})}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"actionName"})," is a dot-separated string. The first part of it is the service name, while the second part of it represents the action name. So if you have a ",(0,r.jsx)(s.code,{children:"posts"})," service with a ",(0,r.jsx)(s.code,{children:"create"})," action, you can call it as ",(0,r.jsx)(s.code,{children:"posts.create"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"params"})," is an object which is passed to the action as a part of the Context. The service can access it via ",(0,r.jsx)(s.code,{children:"ctx.params"}),". ",(0,r.jsxs)(s.em,{children:["It is optional. If you don't define, it will be ",(0,r.jsx)(s.code,{children:"{}"})]}),"."]}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"opts"})," is an object to set/override some request parameters, e.g.: ",(0,r.jsx)(s.code,{children:"timeout"}),", ",(0,r.jsx)(s.code,{children:"retryCount"}),". ",(0,r.jsx)(s.em,{children:"It is optional."})]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Available calling options:"})}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Default"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"timeout"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"Number"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})}),(0,r.jsxs)(s.td,{children:["Timeout of request in milliseconds. If the request is timed out and you don't define ",(0,r.jsx)(s.code,{children:"fallbackResponse"}),", broker will throw a ",(0,r.jsx)(s.code,{children:"RequestTimeout"})," error. To disable set ",(0,r.jsx)(s.code,{children:"0"}),". If it's not defined, the ",(0,r.jsx)(s.code,{children:"requestTimeout"})," value from broker options will be used."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"retries"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"Number"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})}),(0,r.jsxs)(s.td,{children:["Count of retry of request. If the request is timed out, broker will try to call again. To disable set ",(0,r.jsx)(s.code,{children:"0"}),". If it's not defined, the ",(0,r.jsx)(s.code,{children:"retryPolicy.retries"})," value from broker options will be used."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"fallbackResponse"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"Any"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})}),(0,r.jsx)(s.td,{children:"Returns it, if the request has failed."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"nodeID"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"String"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})}),(0,r.jsx)(s.td,{children:"Target nodeID. If set, it will make a direct call to the specified node."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"meta"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"Object"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"{}"})}),(0,r.jsxs)(s.td,{children:["Metadata of request. Access it via ",(0,r.jsx)(s.code,{children:"ctx.meta"})," in actions handlers. It will be transferred & merged at nested calls, as well."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"parentCtx"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"Context"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})}),(0,r.jsxs)(s.td,{children:["Parent ",(0,r.jsx)(s.code,{children:"Context"})," instance. Use it to chain the calls."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"requestID"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"String"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})}),(0,r.jsx)(s.td,{children:"Request ID or Correlation ID. Use it for tracing."})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"usages",children:"Usages"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Call without params"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:'const res = await broker.call("user.list");\n'})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Call with params"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:'const res = await broker.call("user.get", { id: 3 });\n'})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Call with calling options"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:'const res = await broker.call("user.recommendation", { limit: 5 }, {\n    timeout: 500,\n    retries: 3,\n    fallbackResponse: defaultRecommendation\n});\n'})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Call with promise error handling"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:'broker.call("posts.update", { id: 2, title: "Modified post title" })\n    .then(res => console.log("Post updated!"))\n    .catch(err => console.error("Unable to update Post!", err));    \n'})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:'Direct call: get health info from the "node-21" node'})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:'const res = await broker.call("$node.health", null, { nodeID: "node-21" })\n'})}),"\n",(0,r.jsx)(s.h3,{id:"metadata",children:"Metadata"}),"\n",(0,r.jsxs)(s.p,{children:["Send meta information to services with ",(0,r.jsx)(s.code,{children:"meta"})," property. Access it via ",(0,r.jsx)(s.code,{children:"ctx.meta"})," in action handlers. Please note that in nested calls the ",(0,r.jsx)(s.code,{children:"meta"})," is merged."]}),"\n",(0,r.jsx)(s.admonition,{type:"tip",children:(0,r.jsxs)(s.p,{children:["When writing REST APIs, you can obtain the current user session from ",(0,r.jsx)(s.code,{children:"ctx.meta.user"}),". If you want to access ",(0,r.jsx)(s.code,{children:"ctx.meta.user"})," within the action being called, you need to manually pass it in."]})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:"const res = await this.broker.call('objectql.find', \n  {\n    objectName: 'accounts',\n    query: {\n      fields: ['name', 'owner'],                      \n      filters: ['owner', '=', ctx.meta.user.userId],  \n      sort: 'name desc'                               \n    },\n  },\n  {\n    meta:{\n        user: ctx.meta.user\n    }\n  }\n);\n"})}),"\n",(0,r.jsx)(s.h2,{id:"streaming",children:"Streaming"}),"\n",(0,r.jsxs)(s.p,{children:["Moleculer supports Node.js streams as request ",(0,r.jsx)(s.code,{children:"params"})," and as response. Use it to transfer an incoming file from a gateway, encode/decode or compress/decompress streams."]}),"\n",(0,r.jsx)(s.h3,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Send a file to a service as a stream"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:'const stream = fs.createReadStream(fileName);\n\nbroker.call("storage.save", stream, { meta: { filename: "avatar-123.jpg" }});\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Please note, the ",(0,r.jsx)(s.code,{children:"params"})," should be a stream, you cannot add any additional variables to the ",(0,r.jsx)(s.code,{children:"params"}),". Use the ",(0,r.jsx)(s.code,{children:"meta"})," property to transfer additional data."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Receiving a stream in a service"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:'module.exports = {\n    name: "storage",\n    actions: {\n        save(ctx) {\n            // Save the received stream to a file\n            const s = fs.createWriteStream(`/tmp/${ctx.meta.filename}`);\n            ctx.params.pipe(s);\n        }\n    }\n};\n'})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Return a stream as response in a service"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:'module.exports = {\n    name: "storage",\n    actions: {\n        get: {\n            params: {\n                filename: "string"\n            },\n            handler(ctx) {\n                return fs.createReadStream(`/tmp/${ctx.params.filename}`);\n            }\n        }\n    }\n};\n'})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Process received stream on the caller side"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:'const filename = "avatar-123.jpg";\nbroker.call("storage.get", { filename })\n    .then(stream => {\n        const s = fs.createWriteStream(`./${filename}`);\n        stream.pipe(s);\n        s.on("close", () => broker.logger.info("File has been received"));\n    })\n'})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"AES encode/decode example service"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:'const crypto = require("crypto");\nconst password = "moleculer";\n\nmodule.exports = {\n    name: "aes",\n    actions: {\n        encrypt(ctx) {\n            const encrypt = crypto.createCipher("aes-256-ctr", password);\n            return ctx.params.pipe(encrypt);\n        },\n\n        decrypt(ctx) {\n            const decrypt = crypto.createDecipher("aes-256-ctr", password);\n            return ctx.params.pipe(decrypt);\n        }\n    }\n};\n'})})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},47426:(e,s,n)=>{n.d(s,{A:()=>r});const r=n.p+"assets/images/action-balancing-2a12314575631352233e6a52d63b43cf.gif"},28453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>a});var r=n(96540);const t={},c=r.createContext(t);function i(e){const s=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(c.Provider,{value:s},e.children)}}}]);